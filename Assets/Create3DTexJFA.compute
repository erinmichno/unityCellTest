// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSInit
#pragma kernel CSClear

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> Result;
StructuredBuffer<float3> SeedBuffer;
int SeedCount;



float4 JFAIteration(in float3 fragCoord, in float stepLength)
{
	float step = floor(stepLength + 0.5); //texel offset may not need w/correct sampler...
	float bestDistance = 9999999.0;
	int bestIndex = 0;

	for (int z = -1; z <= 1; ++z) {
		for (int y = -1; y <= 1; ++y) {
			for (int x = -1; x <= 1; ++x) {

				float3 sampleCoord = fragCoord + float3(x, y, z) * step;
				float4 data = Result[sampleCoord];
				int indexClosest = floor(data.x + 0.1);
				float dist = length(SeedBuffer[indexClosest].xyz - fragCoord);
				if (dist < bestDistance)
				{
					bestDistance = dist;
					bestIndex = indexClosest;
				}
			}
		}
	}
	float4 retval = Result[fragCoord];
	retval.x = bestIndex;
	retval.y = bestDistance;

	/*retval.x = fragCoord.x/128.0;
	retval.y = fragCoord.y/128.0;*/
	return retval;
}





[numthreads(8,8,8)]
void CSMain (uint3 groupID : SV_GroupID, uint3 dispatchThreadID : SV_DispatchThreadID)
{
	

	Result[dispatchThreadID.xyz] = JFAIteration(dispatchThreadID.xyz, 64);
	Result[dispatchThreadID.xyz] = JFAIteration(dispatchThreadID.xyz, 32);
	Result[dispatchThreadID.xyz] = JFAIteration(dispatchThreadID.xyz, 16);
	Result[dispatchThreadID.xyz] = JFAIteration(dispatchThreadID.xyz, 8);
	Result[dispatchThreadID.xyz] = JFAIteration(dispatchThreadID.xyz, 4);
	Result[dispatchThreadID.xyz] = JFAIteration(dispatchThreadID.xyz, 2);
	Result[dispatchThreadID.xyz] = JFAIteration(dispatchThreadID.xyz, 1);
	
}

[numthreads(8, 1, 1)]
void CSInit(uint3 groupID : SV_GroupID, uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID, uint groupIndex : SV_GroupIndex)
{

	float3 val = floor(SeedBuffer[dispatchThreadID.x]);
	//Result[val.xyz] = float4(val.xyz, 1);
	Result[val.xyz] = float4(dispatchThreadID.x, 0.0, 0, 1);
																  
}

[numthreads(8, 8, 8)]
void CSClear(uint3 id : SV_DispatchThreadID)
{
	

	Result[id.xyz] = float4(0.0, 0.0, 0.0, 1.0);
}

