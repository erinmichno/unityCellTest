// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSInit
#pragma kernel CSClear

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> Result;
StructuredBuffer<float3> SeedBuffer;
int SeedCount;

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!
	
	Result[id.xyz] = float4( id.x /128.0, id.y /128.0, id.z / 128.0, 0.01);
}

[numthreads(8, 1, 1)]
void CSInit(uint3 groupID : SV_GroupID, uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID, uint groupIndex : SV_GroupIndex)
{
	int3 val = floor(SeedBuffer[dispatchThreadID.x]);
	int2 a = int2(1, 0);
	Result[val.xyz + a.xyy] = float4(1, 0, 0, 1);
	Result[val.xyz + a.yxy] = float4(1, 0, 0, 1);
	Result[val.xyz+ a.yyx] = float4(1, 0, 0, 1);
	Result[val.xyz - a.xyy] = float4(1, 0, 0, 1);
	Result[val.xyz - a.yxy] = float4(1, 0, 0, 1);
	Result[val.xyz - a.yyx] = float4(1, 0, 0, 1);
	
	Result[val.xyz] = float4(1/*dispatchThreadID.x*/, 0.0, 0, 1);//or a colorvalue;
																   //Result[val.xy] = float4(dispatchThreadID.x, 0.0, secondBest, secondDist);
}

[numthreads(8, 8, 8)]
void CSClear(uint3 id : SV_DispatchThreadID)
{
	

	Result[id.xyz] = float4(0.0, 0.0, 0.0, 0.0);
}

