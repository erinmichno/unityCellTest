// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSInit
#pragma kernel CSClear


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<float2> SeedBuffer;
RWTexture2D<float4> Result;
int SeedCount;





//float4 EncodeData(in float2 coord, in float3 color)
//{
//	float4 ret = float4(0.0, 0.0, 0.0, 0.0);
//	ret.xy = coord;
//	ret.z = floor(color.x * 255.0) * 256.0 + floor(color.y * 255.0);
//	ret.w = floor(color.z * 255.0);
//	return ret;
//}
//
//
//void DecodeData(in float4 data, out float2 coord, out float3 color)
//{
//	coord = data.xy;
//	color.x = floor(data.z / 256.0) / 255.0;
//	color.y = fmod(data.z, 256.0) / 255.0;
//	color.z = fmod(data.w, 256.0) / 255.0;
//}


//step length starts texRes/2  and /2 for each loop until 1  ie if tex is 128 then will call this
// 64/32/16/8/4/2/1  (7 times)
float4 JFAIteration(in float2 fragCoord, in float stepLength)
{
	float step = floor(stepLength + 0.5); //texel offset may not need w/correct sampler...
	float bestDistance = 99999.0;
	
	int bestIndex = 0;
	
	for (int y = -1; y <= 1; ++y) {
		for (int x = -1; x <= 1; ++x) {
			float2 sampleCoord = fragCoord + float2(x, y) * step;
			float4 data = Result[sampleCoord];
			int indexClosest = floor(data.x + 0.1);
			float dist = length(SeedBuffer[indexClosest].xy - fragCoord);
			if ( dist < bestDistance)
			{
				bestDistance = dist;
				bestIndex = indexClosest; 
			}
			
			
		}
	}
	float4 retval = bestIndex.xxxx;
	retval.y = bestDistance;
	return retval;
}

float4 JFASECONDBest(in float2 fragCoord, in float stepLength)
{
	float step = floor(stepLength + 0.5); //texel offset may not need w/correct sampler...
	float bestDistance = 99999.0;

	int bestIndex = 0;

	for (int y = -1; y <= 1; ++y) {
		for (int x = -1; x <= 1; ++x) {
			float2 sampleCoord = fragCoord + float2(x, y) * step;
			float4 data = Result[sampleCoord];
			int indexClosest = floor(data.x + 0.1);
			float dist = length(SeedBuffer[indexClosest].xy - fragCoord);
			if (dist < bestDistance && Result[fragCoord].x != indexClosest)
			{
				bestDistance = dist;
				bestIndex = indexClosest;
			}
		}
	}
	float4 retval;
	retval.xy = Result[fragCoord].xy; //actual best
	retval.z = bestIndex; //should be 2nd best
	retval.w = bestDistance;
	return retval;
}







[numthreads(8,8,1)]
void CSMain(uint3 groupID : SV_GroupID, uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID, uint groupIndex : SV_GroupIndex)
{


	Result[dispatchThreadID.xy] = JFAIteration(dispatchThreadID.xy, 64);
	Result[dispatchThreadID.xy] = JFAIteration(dispatchThreadID.xy, 32);
	Result[dispatchThreadID.xy] = JFAIteration(dispatchThreadID.xy, 16);
	Result[dispatchThreadID.xy] = JFAIteration(dispatchThreadID.xy, 8);
	Result[dispatchThreadID.xy] = JFAIteration(dispatchThreadID.xy, 4);
	Result[dispatchThreadID.xy] = JFAIteration(dispatchThreadID.xy, 2);
	Result[dispatchThreadID.xy] = JFAIteration(dispatchThreadID.xy, 1);


	Result[dispatchThreadID.xy] = JFASECONDBest(dispatchThreadID.xy, 64);
	Result[dispatchThreadID.xy] = JFASECONDBest(dispatchThreadID.xy, 32);
	Result[dispatchThreadID.xy] = JFASECONDBest(dispatchThreadID.xy, 16);
	Result[dispatchThreadID.xy] = JFASECONDBest(dispatchThreadID.xy, 8);
	Result[dispatchThreadID.xy] = JFASECONDBest(dispatchThreadID.xy, 4);
	Result[dispatchThreadID.xy] = JFASECONDBest(dispatchThreadID.xy, 2);
	Result[dispatchThreadID.xy] = JFASECONDBest(dispatchThreadID.xy, 1);

}





[numthreads(8, 8, 1)]
void CSClear(uint3 dispatchThreadID : SV_DispatchThreadID)
{
	Result[dispatchThreadID.xy] = float4(0, 0, 0, 0);
}

//Thats the way to do it eventually
[numthreads(8, 1, 1)]
void CSInit(uint3 groupID : SV_GroupID, uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID, uint groupIndex : SV_GroupIndex)
{
	float2 val = SeedBuffer[dispatchThreadID.x];
							//index of best     //next closest (set to farthest to start will be overwritten)
	Result[val.xy] = float4(dispatchThreadID.x, 0.0, SeedCount - 1, 0.0);//or a colorvalue;
}

//create a compute shader init for setting an area dirty to be reinvoked w/offset


